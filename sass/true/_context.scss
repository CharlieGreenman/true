// Context Management
// ==================



// Context [variable]
// ------------------
/// True current context
/// @access private
/// @group private
/// @type list
$_true-context: ();



// Context [mixin]
// ---------------
/// Update the current context for a given scope
/// @access private
/// @group private
/// @param {String} $scope - Either `module`, `test` or `assert`
/// @param {String} $name - Name of current scope
@mixin _true-context(
  $scope,
  $name
) {
  $_true-context: append($_true-context, ($scope, $name)) !global;
}



// Context Pop [mixin]
// -------------------
/// Remove the deepest context layer
/// @access private
/// @group private
@mixin _true-context-pop {
  $new: ();

  @for $i from 1 to length($_true-context) {
    $new: append($new, nth($_true-context, $i));
  }

  $_true-context: $new !global;
}



// Output-context [variable]
// -------------------------
$_true-output-context: ();



// Output-context [mixin]
// ----------------------
@mixin _true-output-context(
  $new
) {
  @if index($_true-output-context, $new) {
    @if ($new == 'assert') {
      @error 'The `assert()` mixin can not contain another `assert()`';
    }

    @error 'The `#{$new}()` mixin must only be used once per `assert()`';
  } @else if $new {
    $_true-output-context: append($_true-output-context, $new) !global;
  } @else {
    $length: length($_true-output-context);
    $has-both: index($_true-output-context, 'output') and index($_true-output-context, 'expect');

    @if ($length != 3) or (not $has-both) {
      @error 'Each `assert()` must contain one `output()` and one `expect()`';
    }

    $_true-output-context: () !global;
  }
}


// Context-or-error [mixin]
// ------------------------
@mixin _true-context-or-error {
  @if not index($_true-output-context, 'assert') {
    @error 'The `assert()` wrapper is required for `output()` and `expect()`';
  }
}


// Context [function]
// ------------------
/// Get information on current context for a given scope
/// @access private
/// @group private
/// @param {String} $scope
/// @return {String}
@function _true-context(
  $scope
) {
  $value: null;

  @each $entry-scope, $entry-value in $_true-context {
    @if $entry-scope == $scope {
      $value: $entry-value;
    }
  }

  @return $value;
}



// Context All [function]
// ----------------------
/// Get list of context names for a given scope
/// @access private
/// @group private
/// @param {String} $scope
/// @return {List}
@function _true-context-all(
  $scope
) {
  $list: ();

  @each $entry-scope, $entry-value in $_true-context {
    @if $entry-scope == $scope {
      $list: append($list, $entry-value);
    }
  }

  @return $list;
}
