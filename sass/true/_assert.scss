// Assert
// ======


@mixin assert-true(
  $assert,
  $description: ''
) {
  $debug-message: 'Expected: true',
                  'Result: false';
  $result: if($assert, pass, fail);

  @if index(_true-get(output), css) {
    .assert-true {
      -result: to-upper-case($result);
      -description: $description;
      -expected: true;
      -returned: $assert;
    }
  }

  @include _true-report-assert($result, $description, $debug-message...);
}


@mixin assert-false(
  $assert,
  $description: ''
) {
  $debug-message: 'Expected: false',
                  'Result: true';
  $result: if(not $assert, pass, fail);

  @if index(_true-get(output), css) {
    .assert-false {
      -result: to-upper-case($result);
      -description: $description;
      -expected: false;
      -returned: $assert;
    }
  }

  @include _true-report-assert($result, $description, $debug-message...);
}


@mixin assert-equal(
  $assert,
  $expected,
  $description: ''
) {
  $debug-message: 'Expected (#{type-of($expected)}): #{inspect($expected)}',
                  'Result (#{type-of($assert)}): #{inspect($assert)}';
  $result: if(is-equal($assert, $expected), pass, fail);

  @if index(_true-get(output), css) {
    .assert-equal {
      -result: to-upper-case($result);
      -description: $description;
      -expected: $expected;
      -returned: $assert;
    }
  }

  @include _true-report-assert($result, $description, $debug-message...);
}


@mixin assert-unequal(
  $assert,
  $expected,
  $description: ''
) {
  $debug-message: 'Expected (#{type-of($expected)}): #{inspect($expected)}',
                  'Result (#{type-of($assert)}): #{inspect($assert)}';
  $result: if(is-equal($assert, $expected), fail, pass);

  @if index(_true-get(output), css) {
    .assert-unequal {
      -result: to-upper-case($result);
      -description: $description;
      -expected: $expected;
      -returned: $assert;
    }
  }

  @include _true-report-assert($result, $description, $debug-message...);
}


// CSS Output Tests
// ----------------

@mixin assert(
  $description
) {
  @include _true-context(assert, $description);

  @if not(index(_true-get(output), css)) {
    @include _true-message('- CSS: #{_true-context(assert)}');

    @at-root #{_true-selector(module test assert)} {
      @content;
    }
  } @else {
    #{_true-selector(assert)} {
      @content;
    }
  }

  @include _true-report-assert(output-to-css, $description);
  @include _true-context(assert, null);
}

@mixin input {
  .input {
    @content;
  }
}

@mixin expect {
  .expect {
    @content;
  }
}


// Pass / Fail
// -----------

@mixin _true-report-assert(
  $result,
  $description,
  $debug...
) {
  $name: _true-context(test);

  @if $result == fail {
    @debug '# FAIL: #{$name}';

    @each $item in $debug {
      @debug '- ' + $item;
    }

    @if $description {
      @warn $description;
    }

    $details: $-tnl + '  - error: ' + '(#{$debug}) ' + $description;
    @include _true-details-update($details);
  }

  @include _true-update(test, $result);
}
