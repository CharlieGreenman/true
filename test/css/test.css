@charset "UTF-8";
/* # Module: Map Add [function] */
/* ---------------------------- */
/* Test: Returns a map with the sum-values of two numeric maps */
/*   ✔ [assert-equal] Returns a map with the sum-values of two numeric maps */
/*  */
/*  */
/* # Module: True Message */
/* ---------------------- */
/* Test: Simple messages */
/*   ASSERT: Render as CSS comments   */
/*   OUTPUT   */
/* This is a simple message */
/*   END_OUTPUT   */
/*   EXPECTED   */
/* This is a simple message */
/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/* Test: Multi-line messages */
/*   ASSERT: Render as multiple CSS comments   */
/*   OUTPUT   */
/* This is a */
/* multiline message */
/*   END_OUTPUT   */
/*   EXPECTED   */
/* This is a */
/* multiline message */
/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: true-context & true-context-pop [mixins] */
/* -------------------------------------------------- */
/* Test: Adds scope and name to context */
/*   ✔ [assert-unequal] Confirm that there is currently no "fake" scope */
/*   ✔ [assert-unequal] Confirm that there is currently no "fake" scope */
/*   ✔ [assert-equal] Sets the value of scope "fake" to "this scope is not real" */
/*   ✔ [assert-unequal] Confirm that "fake" scope has been removed */
/*   ✔ [assert-unequal] Confirm that "fake" scope has been removed */
/*  */
/*  */
/* # Module: true-context & true-context-all [functions] */
/* ----------------------------------------------------- */
/* Test: Returns current module context */
/*   ✔ [assert-equal] Returns current module context */
/*  */
/* Test: Returns current test context */
/*   ✔ [assert-equal] Returns current test context */
/*  */
/* # Module: true-context & true-context-all [functions] :: nested */
/* --------------------------------------------------------------- */
/* Test: Returns the innermost module name */
/*   ✔ [assert-equal] Returns the innermost module name */
/*  */
/* Test: _true-context-all [function] */
/*   ✔ [assert-equal] Returns the current stack of module names */
/*  */
/*  */
/*  */
/* # Module: Update Results */
/* ------------------------ */
/* Test: Update global results with pass */
/*   ✔ [assert-equal] increments run */
/*   ✔ [assert-equal] increments pass */
/*   ✔ [assert-equal] leaves fails as-is */
/*   ✔ [assert-equal] leaves output-to-css as-is */
/*  */
/*  */
/* # Module: Stats */
/* --------------- */
/* Test: Count updates */
/*   ✔ [assert-equal] assertions counts is updated */
/*   ✔ [assert-equal] leaves modules counts is as-is */
/*   ✔ [assert-equal] tests counts is updated */
/*  */
/* Test: Stats message creation */
/*   ✔ [assert-equal] Stats message creation */
/*  */
/*  */
/* # Module: pass-details [mixin] */
/* ------------------------------ */
/* Test: Properly output a passing assertion result */
/*   ASSERT: passing test   */
/*   OUTPUT   */
.test-output {
  /*   ✔ [output] passing test */ }

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  /*   ✔ [output] passing test */ }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # Module: variable-details [function] */
/* ------------------------------------- */
/* Test: Number */
/*   ✔ [assert-equal] Number */
/*  */
/* Test: String */
/*   ✔ [assert-equal] String */
/*  */
/* Test: Map */
/*   ✔ [assert-equal] Map */
/*  */
/* Test: Comma List */
/*   ✔ [assert-equal] Comma List */
/*  */
/* Test: Space List */
/*   ✔ [assert-equal] Space List */
/*  */
/*  */
/* # Module: Modules */
/* ----------------- */
/* Test: test-module */
/*   ✔ [assert-equal] Changes the current module context */
/*  */
/* # Module: Modules :: Unquoted Module Name */
/* ----------------------------------------- */
/* Test: Don’t barf on unquoted names */
/*   ✔ [assert-true] Please don’t barf on me */
/*  */
/*  */
/*  */
/* # Module: Tests */
/* --------------- */
/* Test: test [mixin] */
/*   ✔ [assert-equal] Changes the current test context */
/*  */
/*  */
/* # Module: Is Truthy */
/* ------------------- */
/* Test: True is truthy */
/*   ✔ [assert-equal] True is truthy */
/*  */
/* Test: String is truthy */
/*   ✔ [assert-equal] String is truthy */
/*  */
/* Test: List is truthy */
/*   ✔ [assert-equal] List is truthy */
/*  */
/* Test: False is not truthy */
/*   ✔ [assert-equal] False is not truthy */
/*  */
/* Test: Null is not truthy */
/*   ✔ [assert-equal] Null is not truthy */
/*  */
/* Test: Empty string is not truthy */
/*   ✔ [assert-equal] Empty string is not truthy */
/*  */
/* Test: Empty list is not truthy */
/*   ✔ [assert-equal] Empty list is not truthy */
/*  */
/*  */
/* # Module: Assert True */
/* --------------------- */
/* Test: Truthiness */
/*   ✔ [assert-true] Non-false properties return true. */
/*  */
/*  */
/* # Module: Assert False */
/* ---------------------- */
/* Test: Falsiness */
/*   ✔ [assert-false] Negated properties return false. */
/*  */
/* Test: null */
/*   ✔ [assert-false] Null properties return false. */
/*  */
/* Test: Empty string */
/*   ✔ [assert-false] Empty string return false. */
/*  */
/* Test: empty list */
/*   ✔ [assert-false] Empty lists return false. */
/*  */
/*  */
/* # Module: Assert Equal */
/* ---------------------- */
/* Test: Equality */
/*   ✔ [assert-equal] 2 - 1 should equal 1. */
/*  */
/* Test: Empty description */
/*   ✔ [assert-equal] Empty description */
/*  */
/* Test: Adding floats */
/*   ✔ [assert-equal] Adding floats */
/*  */
/* Test: Rounded numbers with $inspect */
/*   ✔ [assert-equal] Rounded numbers with $inspect */
/*  */
/* Test: Rounded colors with $inspect */
/*   ✔ [assert-equal] Rounded colors with $inspect */
/*  */
/*  */
/* # Module: Assert UnEqual */
/* ------------------------ */
/* Test: Inequality */
/*   ✔ [assert-unequal] 3 - 1 is not equal to 3. */
/*  */
/* Test: Mismatched types */
/*   ✔ [assert-unequal] Mismatched types */
/*  */
/*  */
/* # Module: Assert (output) */
/* ------------------------- */
/* Test: CSS output math */
/*   ASSERT: Output math compares properly   */
/*   OUTPUT   */
.test-output {
  -property1: 0.3;
  -property2: 0.33333; }

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  -property1: 0.3;
  -property2: 0.33333; }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/* Test: output/expect [mixins] */
/*   ASSERT: Output and expected selector patterns match   */
/*   OUTPUT   */
.test-output {
  -property: value; }
  @media (min-width: 30em) {
    .test-output {
      -prop: val; }
      .selector {
        -prop: val; } }

/*   END_OUTPUT   */
/*   EXPECTED   */
.test-output {
  -property: value; }
  @media (min-width: 30em) {
    .test-output {
      -prop: val; }
      .selector {
        -prop: val; } }

/*   END_EXPECTED   */
/*   END_ASSERT   */
/*  */
/*  */
/* # SUMMARY ---------- */
/* 41 Tests: */
/*  - 36 Passed */
/*  - 0 Failed */
/*  - 5 Output to CSS */
/* Stats: */
/* - 18 Modules */
/* - 41 Tests */
/* - 50 Assertions */
/* -------------------- */
