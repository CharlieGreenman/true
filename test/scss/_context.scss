// Settings Tests
// ==============


// Adding and removing context
@include test-module('true-context & true-context-pop [mixins]') {
  @include test('Adds scope and name to context') {
    @each $entry-scope, $entry-name in $_true-context {
      @include assert-unequal(
        $entry-scope,
        'fake',
        'Confirm that there is currently no "fake" scope');
    }

    @include _true-context(
      'fake',
      'this scope is not real');

    @include assert-equal(
      _true-context('fake'),
      'this scope is not real',
      'Sets the value of scope "fake" to "this scope is not real"');

    @include _true-context-pop;

    @each $entry-scope, $entry-name in $_true-context {
      @include assert-unequal(
        $entry-scope,
        'fake',
        'Confirm that "fake" scope has been removed');
    }
  }
}


// Inspecting context
@include test-module('true-context & true-context-all [functions]') {
  @include test('Returns current module context') {
    @include assert-equal(
      _true-context('module'),
      'true-context & true-context-all [functions]');
  }

  @include test('Returns current test context') {
    @include assert-equal(
      _true-context('test'),
      'Returns current test context');
  }

  @include test-module('nested') {
    @include test('Returns the innermost module name') {
      @include assert-equal(
        _true-context('module'),
        'nested');
    }

    @include test('_true-context-all [function]') {
      @include assert-equal(
        _true-context-all('module'),
        'true-context & true-context-all [functions]' 'nested',
        'Returns the current stack of module names');
    }
  }
}


// Output context
@include test-module('true-output-context [mixin]') {
  $empty-list: ();
  $before: $_true-output-context;
  @include _true-output-context('assert');
  $assert: $_true-output-context;
  @include _true-output-context('expect');
  $expect: $_true-output-context;
  @include _true-output-context('output');
  $output: $_true-output-context;
  @include _true-output-context(null);
  $reset: $_true-output-context;

  @include test('Appends new context') {
    @include assert-equal(
      $before,
      $empty-list,
      'Check initial value');

    @include assert-equal(
      $assert,
      join((), 'assert'));

    @include assert-equal(
      $expect,
      ('assert' 'expect'));

    @include assert-equal(
      $output,
      ('assert' 'expect' 'output'));
  }

  @include test('Resets context') {
    @include assert-equal(
      $reset,
      $before);
  }

  // @include expect { /* test that this breaks things */ }
  // @include output { /* test that this breaks things */ }
  // @include assert { /* test that this breaks things */ }
  // @include assert {
  //   @include expect { /* nothing */ }
  //   @include expect { /* an error */ }
  // }
}
